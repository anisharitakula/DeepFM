name: CI/CD Pipeline

on:
  push:
    branches:
      - '*'
  workflow_dispatch:

jobs:
  ci-pipeline:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        # Fetch full git history for pushing commits
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        cache-dependency-path: './model_deployment1/requirements.txt'
    
    - name: Install dependencies
      working-directory: ./model_deployment1
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Run Training Script
      working-directory: ./model_deployment1
      env:
        MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        chmod +x train_workflow.sh
        bash -x train_workflow.sh
    
    - name: Run Tests
      working-directory: ./model_deployment1
      run: |
        # Add your test commands here
        PYTHONPATH=$(pwd) pytest -m code
        pytest --dataset1-loc='s3://deepfm-model/input_data/ratings.csv' tests/data --verbose --disable-warnings
    
    - name: Compare Model Performance
      id: model-comparison
      working-directory: ./model_deployment1
      env:
        MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        python model_comparison.py
        # Output result to a file for next job
        echo "DEPLOYMENT_STATUS=$(cat deployment_status.txt)" >> $GITHUB_OUTPUT
    
    - name: Build and Push Docker Image to ECR
      if: ${{ steps.model-comparison.outputs.DEPLOYMENT_STATUS == 'true' }}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        IMAGE_TAG: latest
      working-directory: ./model_deployment1
      run: |
        # Read the model URI from the previous step
        MODEL_URI=$(cat model_uri.txt)

        # Build Docker image
        docker build \
          --build-arg MODEL_URI=$MODEL_URI \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Cleanup Build Artifacts
      run: find . -name '__pycache__' -exec rm -rf {} +
    
    - name: Debug Git Status and Modifications
      run: |
        echo "Git Status:"
        git status
        echo "\nGit Diff:"
        git diff model_deployment1/train_workflow.sh

    - name: Push to Main Branch
      if: ${{ steps.model-comparison.outputs.DEPLOYMENT_STATUS == 'true' }}
      run: |
        git config core.fileMode false  # Ignore file permission changes
        git config user.name github-actions
        git config user.email github-actions@github.com
        git checkout main
        git pull origin main
        git merge ${{ github.ref_name }}
        git push origin main
  
  cd-pipeline:
    needs: ci-pipeline
    # Only run if CI pipeline was successful and model comparison indicates deployment
    if: ${{ needs.ci-pipeline.outputs.DEPLOYMENT_STATUS == 'true' }}
    
    # This will use the EC2 hosted runner
    runs-on: [self-hosted, ec2]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Pull and Deploy Docker Image from ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      run: |
        # Pull the latest image from ECR
        docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Stop and remove existing container if exists
        docker stop model-serving || true
        docker rm model-serving || true
        
        # Run new container
        docker run -d \
          --name model-serving \
          -p 8000:8000 \
          -e MLFLOW_TRACKING_URI=$MLFLOW_TRACKING_URI \
          $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
    - name: Verify Deployment
      run: |
        # Health check 
        curl http://localhost:8000/health